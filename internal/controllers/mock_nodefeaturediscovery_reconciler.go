// Code generated by MockGen. DO NOT EDIT.
// Source: nodefeaturediscovery_reconciler.go

// Package new_controllers is a generated GoMock package.
package new_controllers

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	v1 "sigs.k8s.io/node-feature-discovery-operator/api/v1"
)

// MocknodeFeatureDiscoveryHelperAPI is a mock of nodeFeatureDiscoveryHelperAPI interface.
type MocknodeFeatureDiscoveryHelperAPI struct {
	ctrl     *gomock.Controller
	recorder *MocknodeFeatureDiscoveryHelperAPIMockRecorder
}

// MocknodeFeatureDiscoveryHelperAPIMockRecorder is the mock recorder for MocknodeFeatureDiscoveryHelperAPI.
type MocknodeFeatureDiscoveryHelperAPIMockRecorder struct {
	mock *MocknodeFeatureDiscoveryHelperAPI
}

// NewMocknodeFeatureDiscoveryHelperAPI creates a new mock instance.
func NewMocknodeFeatureDiscoveryHelperAPI(ctrl *gomock.Controller) *MocknodeFeatureDiscoveryHelperAPI {
	mock := &MocknodeFeatureDiscoveryHelperAPI{ctrl: ctrl}
	mock.recorder = &MocknodeFeatureDiscoveryHelperAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MocknodeFeatureDiscoveryHelperAPI) EXPECT() *MocknodeFeatureDiscoveryHelperAPIMockRecorder {
	return m.recorder
}

// finalizeComponents mocks base method.
func (m *MocknodeFeatureDiscoveryHelperAPI) finalizeComponents(ctx context.Context, nfdInstance *v1.NodeFeatureDiscovery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "finalizeComponents", ctx, nfdInstance)
	ret0, _ := ret[0].(error)
	return ret0
}

// finalizeComponents indicates an expected call of finalizeComponents.
func (mr *MocknodeFeatureDiscoveryHelperAPIMockRecorder) finalizeComponents(ctx, nfdInstance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "finalizeComponents", reflect.TypeOf((*MocknodeFeatureDiscoveryHelperAPI)(nil).finalizeComponents), ctx, nfdInstance)
}

// handleGC mocks base method.
func (m *MocknodeFeatureDiscoveryHelperAPI) handleGC(ctx context.Context, nfdInstance *v1.NodeFeatureDiscovery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "handleGC", ctx, nfdInstance)
	ret0, _ := ret[0].(error)
	return ret0
}

// handleGC indicates an expected call of handleGC.
func (mr *MocknodeFeatureDiscoveryHelperAPIMockRecorder) handleGC(ctx, nfdInstance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handleGC", reflect.TypeOf((*MocknodeFeatureDiscoveryHelperAPI)(nil).handleGC), ctx, nfdInstance)
}

// handleMaster mocks base method.
func (m *MocknodeFeatureDiscoveryHelperAPI) handleMaster(ctx context.Context, nfdInstance *v1.NodeFeatureDiscovery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "handleMaster", ctx, nfdInstance)
	ret0, _ := ret[0].(error)
	return ret0
}

// handleMaster indicates an expected call of handleMaster.
func (mr *MocknodeFeatureDiscoveryHelperAPIMockRecorder) handleMaster(ctx, nfdInstance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handleMaster", reflect.TypeOf((*MocknodeFeatureDiscoveryHelperAPI)(nil).handleMaster), ctx, nfdInstance)
}

// handlePrune mocks base method.
func (m *MocknodeFeatureDiscoveryHelperAPI) handlePrune(ctx context.Context, nfdInstance *v1.NodeFeatureDiscovery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "handlePrune", ctx, nfdInstance)
	ret0, _ := ret[0].(error)
	return ret0
}

// handlePrune indicates an expected call of handlePrune.
func (mr *MocknodeFeatureDiscoveryHelperAPIMockRecorder) handlePrune(ctx, nfdInstance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handlePrune", reflect.TypeOf((*MocknodeFeatureDiscoveryHelperAPI)(nil).handlePrune), ctx, nfdInstance)
}

// handleStatus mocks base method.
func (m *MocknodeFeatureDiscoveryHelperAPI) handleStatus(ctx context.Context, nfdInstance *v1.NodeFeatureDiscovery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "handleStatus", ctx, nfdInstance)
	ret0, _ := ret[0].(error)
	return ret0
}

// handleStatus indicates an expected call of handleStatus.
func (mr *MocknodeFeatureDiscoveryHelperAPIMockRecorder) handleStatus(ctx, nfdInstance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handleStatus", reflect.TypeOf((*MocknodeFeatureDiscoveryHelperAPI)(nil).handleStatus), ctx, nfdInstance)
}

// handleTopology mocks base method.
func (m *MocknodeFeatureDiscoveryHelperAPI) handleTopology(ctx context.Context, nfdInstance *v1.NodeFeatureDiscovery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "handleTopology", ctx, nfdInstance)
	ret0, _ := ret[0].(error)
	return ret0
}

// handleTopology indicates an expected call of handleTopology.
func (mr *MocknodeFeatureDiscoveryHelperAPIMockRecorder) handleTopology(ctx, nfdInstance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handleTopology", reflect.TypeOf((*MocknodeFeatureDiscoveryHelperAPI)(nil).handleTopology), ctx, nfdInstance)
}

// handleWorker mocks base method.
func (m *MocknodeFeatureDiscoveryHelperAPI) handleWorker(ctx context.Context, nfdInstance *v1.NodeFeatureDiscovery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "handleWorker", ctx, nfdInstance)
	ret0, _ := ret[0].(error)
	return ret0
}

// handleWorker indicates an expected call of handleWorker.
func (mr *MocknodeFeatureDiscoveryHelperAPIMockRecorder) handleWorker(ctx, nfdInstance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "handleWorker", reflect.TypeOf((*MocknodeFeatureDiscoveryHelperAPI)(nil).handleWorker), ctx, nfdInstance)
}

// hasFinalizer mocks base method.
func (m *MocknodeFeatureDiscoveryHelperAPI) hasFinalizer(nfdInstance *v1.NodeFeatureDiscovery) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "hasFinalizer", nfdInstance)
	ret0, _ := ret[0].(bool)
	return ret0
}

// hasFinalizer indicates an expected call of hasFinalizer.
func (mr *MocknodeFeatureDiscoveryHelperAPIMockRecorder) hasFinalizer(nfdInstance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "hasFinalizer", reflect.TypeOf((*MocknodeFeatureDiscoveryHelperAPI)(nil).hasFinalizer), nfdInstance)
}

// setFinalizer mocks base method.
func (m *MocknodeFeatureDiscoveryHelperAPI) setFinalizer(ctx context.Context, instance *v1.NodeFeatureDiscovery) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "setFinalizer", ctx, instance)
	ret0, _ := ret[0].(error)
	return ret0
}

// setFinalizer indicates an expected call of setFinalizer.
func (mr *MocknodeFeatureDiscoveryHelperAPIMockRecorder) setFinalizer(ctx, instance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "setFinalizer", reflect.TypeOf((*MocknodeFeatureDiscoveryHelperAPI)(nil).setFinalizer), ctx, instance)
}
